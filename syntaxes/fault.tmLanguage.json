{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Fault",
  "fileTypes": [
    "fspec",
    "fsystem"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.fault",
          "match": "//.*$"
        },
        {
          "name": "comment.block.fault",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.fault",
          "match": "\\b(all|assert|assume|clock|const|def|else|flow|for|func|if|import|init|new|return|run|spec|stock|then|when|this|eventually|eventually-always|always|nmt|nft)\\b"
        },
        {
          "name": "keyword.other.fault",
          "match": "\\b(advance|component|choose|global|leave|system|start|states|stay)\\b"
        },
        {
          "name": "constant.language.fault",
          "match": "\\b(nil|true|false|now)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.fault",
          "match": "\\b(string|bool|int|float|natural|uncertain|unknown)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.fault",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fault",
              "match": "\\\\(u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[abfnrtv\\\\'\"]|[0-7]{3}|x[0-9a-fA-F]{2})"
            }
          ]
        },
        {
          "name": "string.quoted.raw.fault",
          "begin": "`",
          "end": "`"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.fault",
          "match": "\\b([0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b"
        },
        {
          "name": "constant.numeric.hex.fault",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.fault",
          "match": "\\b0[0-7]*\\b"
        },
        {
          "name": "constant.numeric.decimal.fault",
          "match": "\\b[1-9][0-9]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.fault",
          "match": "(=|->|<-)"
        },
        {
          "name": "keyword.operator.logical.fault",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.comparison.fault",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.fault",
          "match": "(\\*\\*|\\+\\+|--|\\+|-|\\*|/|%|\\^|<<|>>|&\\^|&|\\|)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.fault",
          "match": "[,:;.]"
        },
        {
          "name": "punctuation.section.brackets.fault",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.parens.fault",
          "match": "[\\(\\)]"
        },
        {
          "name": "punctuation.section.braces.fault",
          "match": "[\\{\\}]"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.fault",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.fault"
}